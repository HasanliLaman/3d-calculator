/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 public/materials/scene.gltf
Author: Anthony Yanez (https://sketchfab.com/paulyanez)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/calculator-054be0c3f09143f38c4d8038eb2588c6
Title: Calculator
*/
import React from "react";
import { useGLTF, Html } from "@react-three/drei";

export function Calculator(props) {
  const { nodes, materials } = useGLTF("materials/scene.gltf");
  const { onCalculate, setDisplay, display, onOperation, setHovered } = props;

  return (
    <group {...props} dispose={null}>
      <group>
        <mesh
          receiveShadow
          castShadow
          geometry={nodes["Calculator_03_-_Default_0"].geometry}
          material={materials["03_-_Default"]}
        >
          <Html
            transform
            occlude
            scale={[70, 70, 70]}
            position={[0, 386, 50]}
            className="calculator-display"
          >
            <p>{display}</p>
          </Html>
        </mesh>
        <mesh
          receiveShadow
          castShadow
          geometry={nodes.Calculator_Calculator_0.geometry}
          material={materials.Calculator}
        />
        <mesh
          receiveShadow
          castShadow
          geometry={nodes["Calculator_02_-_Default_0"].geometry}
          material={materials["02_-_Default"]}
        />
        <mesh
          receiveShadow
          castShadow
          geometry={nodes["Calculator_20_-_Default_0"].geometry}
          material={materials["20_-_Default"]}
          onPointerOver={() => setHovered(true)}
          onPointerOut={() => setHovered(false)}
          onClick={() => {
            setDisplay((prev) => prev + "7");
          }}
        />
        <mesh
          receiveShadow
          castShadow
          geometry={nodes["Calculator_12_-_Default_0"].geometry}
          material={materials["12_-_Default"]}
        />
        <mesh
          receiveShadow
          castShadow
          geometry={nodes["Calculator_21_-_Default_0"].geometry}
          material={materials["21_-_Default"]}
          onPointerOver={() => setHovered(true)}
          onPointerOut={() => setHovered(false)}
          onClick={() => {
            setDisplay((prev) => prev + "8");
          }}
        />
        <mesh
          receiveShadow
          castShadow
          geometry={nodes["Calculator_04_-_Default_0"].geometry}
          material={materials["04_-_Default"]}
          onPointerOver={() => setHovered(true)}
          onPointerOut={() => setHovered(false)}
          onClick={() => {
            setDisplay((prev) => prev + "9");
          }}
        />
        <mesh
          receiveShadow
          castShadow
          geometry={nodes["Calculator_05_-_Default_0"].geometry}
          material={materials["05_-_Default"]}
          onPointerOver={() => setHovered(true)}
          onPointerOut={() => setHovered(false)}
          onClick={() => {
            onOperation("+");
          }}
        />
        <mesh
          receiveShadow
          castShadow
          geometry={nodes["Calculator_14_-_Default_0"].geometry}
          material={materials["14_-_Default"]}
          onPointerOver={() => setHovered(true)}
          onPointerOut={() => setHovered(false)}
          onClick={() => {
            setDisplay((prev) => prev + "4");
          }}
        />
        <mesh
          receiveShadow
          castShadow
          geometry={nodes["Calculator_15_-_Default_0"].geometry}
          material={materials["15_-_Default"]}
          onPointerOver={() => setHovered(true)}
          onPointerOut={() => setHovered(false)}
          onClick={() => {
            setDisplay((prev) => prev + "5");
          }}
        />
        <mesh
          receiveShadow
          castShadow
          geometry={nodes["Calculator_19_-_Default_0"].geometry}
          material={materials["19_-_Default"]}
          onPointerOver={() => setHovered(true)}
          onPointerOut={() => setHovered(false)}
          onClick={() => {
            setDisplay((prev) => prev + "6");
          }}
        />
        <mesh
          receiveShadow
          castShadow
          geometry={nodes["Calculator_06_-_Default_0"].geometry}
          material={materials["06_-_Default"]}
          onPointerOver={() => setHovered(true)}
          onPointerOut={() => setHovered(false)}
          onClick={() => {
            onOperation("-");
          }}
        />
        <mesh
          receiveShadow
          castShadow
          geometry={nodes["Calculator_08_-_Default_0"].geometry}
          material={materials["08_-_Default"]}
          onPointerOver={() => setHovered(true)}
          onPointerOut={() => setHovered(false)}
          onClick={() => {
            setDisplay((prev) => prev + "1");
          }}
        />
        <mesh
          receiveShadow
          castShadow
          geometry={nodes["Calculator_09_-_Default_0"].geometry}
          material={materials["09_-_Default"]}
          onPointerOver={() => setHovered(true)}
          onPointerOut={() => setHovered(false)}
          onClick={() => {
            setDisplay((prev) => prev + "2");
          }}
        />
        <mesh
          receiveShadow
          castShadow
          geometry={nodes["Calculator_13_-_Default_0"].geometry}
          material={materials["13_-_Default"]}
          onPointerOver={() => setHovered(true)}
          onPointerOut={() => setHovered(false)}
          onClick={() => {
            setDisplay((prev) => prev + "3");
          }}
        />
        <mesh
          receiveShadow
          castShadow
          geometry={nodes["Calculator_=_0"].geometry}
          material={materials.material}
          onPointerOver={() => setHovered(true)}
          onPointerOut={() => setHovered(false)}
          onClick={onCalculate}
        />
        <mesh
          receiveShadow
          castShadow
          geometry={nodes.Calculator_Button3_0.geometry}
          material={materials.Button3}
        />
        <mesh
          receiveShadow
          castShadow
          geometry={nodes["Calculator_11_-_Default_0"].geometry}
          material={materials["11_-_Default"]}
          onPointerOver={() => setHovered(true)}
          onPointerOut={() => setHovered(false)}
          onClick={() => {
            setDisplay((prev) => prev + "0");
          }}
        />
        <mesh
          receiveShadow
          castShadow
          geometry={nodes["Calculator_10_-_Default_0"].geometry}
          material={materials["10_-_Default"]}
          onPointerOver={() => setHovered(true)}
          onPointerOut={() => setHovered(false)}
          onClick={() => {
            setDisplay((prev) => prev + ".");
          }}
        />
        <mesh
          receiveShadow
          castShadow
          geometry={nodes["Calculator_16_-_Default_0"].geometry}
          material={materials["16_-_Default"]}
          onPointerOver={() => setHovered(true)}
          onPointerOut={() => setHovered(false)}
          onClick={() => {
            setDisplay("");
          }}
        />
        <mesh
          receiveShadow
          castShadow
          geometry={nodes["Calculator_23_-_Default_0"].geometry}
          material={materials["23_-_Default"]}
        />
        <mesh
          receiveShadow
          castShadow
          geometry={nodes["Calculator_17_-_Default_0"].geometry}
          material={materials["17_-_Default"]}
        />
        <mesh
          receiveShadow
          castShadow
          geometry={nodes["Calculator_18_-_Default_0"].geometry}
          material={materials["18_-_Default"]}
          onPointerOver={() => setHovered(true)}
          onPointerOut={() => setHovered(false)}
          onClick={() => {
            onOperation("/");
          }}
        />
        <mesh
          receiveShadow
          castShadow
          geometry={nodes["Calculator_22_-_Default_0"].geometry}
          material={materials["22_-_Default"]}
          onPointerOver={() => setHovered(true)}
          onPointerOut={() => setHovered(false)}
          onClick={() => {
            onOperation("x");
          }}
        />
      </group>
    </group>
  );
}

useGLTF.preload("materials/scene.gltf");
